<html>
<body>
<script src="/socket.io/socket.io.js"></script>
<script>

/**Prepare connection**/
var streamid = '<%= id%>';
var connections = new Array();
var recv = new Array();
var total = new Array();
var start = new Array();
var end = new Array();
var expected = new Array();

/*GLOBAL WEBRTC SETTINGS*/
var iceServers = {
    iceServers: [{
        url: 'stun:stun.l.google.com:19302'
    }]
};

var optionalRtpDataChannels = {
    optional: [{
        RtpDataChannels: true
    }]
};
var mediaConstraints = {
    optional: [],
    mandatory: {
        OfferToReceiveAudio: false,
        OfferToReceiveVideo: false 
    }
};
/*global settings*/

/*Trial speed upgrade*/
function transformOutgoingSdp(sdp) {
	var split = sdp.split("b=AS:30");
	if(split.length > 1)
		var newSDP = split[0] + "b=AS:1638400" + split[1];
	else
		newSDP = sdp;
	return newSDP;
}
/*global funcs*/



function setChannelEvents(channel, channelNameForConsoleOutput) {

	var s = -1;
	var increment = 1000;
	/*
	var transfer = function (start,end, channel, id,src,increment)
	{
	
		for (s = start;s<end && s!=-1;s+=increment)
		{
			
			var srcCut = src.slice(s,s + increment);
					
			var payload = {type:'chunk',data:srcCut, start:s, size:srcCut.length, id:id};
			
			setTimeout(channel.send,0,(JSON.stringify(payload)));
		
		}
	};*/
/*
	var segment = function (start,end, channel, id,src,increment)
	{
		for (t = start;t<end && s!=-1;t+=increment)
		{
			var srcCut = src.slice(t,t + increment);
					
			var payload = {type:'chunk',data:srcCut, start:t, size:srcCut.length, id:id};
			
			channel.send(JSON.stringify(payload));
			
		}
	};
	var transfer = function (start,end, channel, id,src,increment)
	{
		var blocksize = increment*10;

		for (s = start;s<end && s!=-1;s+=blocksize)
		{
			var blockend = Math.min(s + blocksize, end);
			console.log('sending block ' + s);
			setTimeout(segment,100,s , blockend, channel, id, src, increment);
		
		}
	};*/

/**No Timeout implementation - breakneck speeds 3mb/s**/
/*
	function transfer(start,end, channel, id,src,increment)
	{
		for (s = start;s<end;s+=increment)
		{
			var srcCut = src.slice(s,s + increment);
					
			var payload = {type:'chunk',data:srcCut, start:s, size:srcCut.length, id:id};
			
			channel.send(JSON.stringify(payload));
			
		}
	}
*/

	/*** setTimeout implementation - very slow 1-2kb/s when in chrome inactive window*/
	function transfer(start,end, channel, id,src,increment)
	{
		if (s!=-1)
		{
			console.log ('resettting start from ' + start + ' to ' + s);
			start = s;
			s=-1;
		}

		var srcCut = src.slice(start,start + increment);
					
		var payload = {type:'chunk',data:srcCut, start:start, size:srcCut.length, id:id};
			
		channel.send(JSON.stringify(payload));
		
		if (start + increment < end)
			setTimeout(transfer, 0,start + increment , end, channel, id, src, increment);
		else
		{
			var srcCut = src.slice(start,end);
					
			var payload = {type:'chunk',data:srcCut, start:start, size:srcCut.length, id:id};
				
			channel.send(JSON.stringify(payload));
		}
		
	}



    channel.onmessage = function (event) {
        console.debug(channelNameForConsoleOutput, 'received a message:', event.data);
		
		var obj = JSON.parse(event.data);
		
		switch (obj.type)
		{
			case 'getchunk':
				var id = obj.id;
				var length = obj.end - obj.start;
				
				var onInitFsRead = function (fs) {
					fs.root.getFile(id, {}, function(fileEntry) {
						fileEntry.file(function(file) {
						
							var reader = new FileReader();

							reader.onloadend = function(e) {
								var src = this.result;
								var b64 = _arrayBufferToBase64(src);
							 
								var start = obj.start;
								var end = b64.length;
								
								var payload = {type:'fileinfo',start:start, end:end, id:id};
								channel.send(JSON.stringify(payload));
								
								transfer(start,end,channel,id,b64,increment);
		
							};

							reader.readAsArrayBuffer(file);
						}, errorHandler);
					}, errorHandler);
				};

				window.requestFileSystem(window.TEMPORARY, 1024*1024, onInitFsRead, errorHandler);
			break;
				
			case 'reset':
				console.log ('recv reset command reset to ' + obj.start);
				s = obj.start-increment;
			break;
		}
    };

    channel.onopen = function () {
		var payload = {type:'hello', data:'first text message over RTP data ports'};
        channel.send(JSON.stringify(payload));
    };
    channel.onclose = function (e) {
        console.error(e);
    };
    channel.onerror = function (e) {
        console.error(e);
    };
}

function setDownloaderChannelEvents(channel, channelNameForConsoleOutput, id, filesize,channelid) {
	start[channelid] = 0;
	end[channelid] = 0;//filesize;
	total[channelid] = 0;
	recv[channelid] = "";
	//var chunkarray;// = new Uint8Array(filesize);

    channel.onmessage = function (event) {
        //console.debug(channelNameForConsoleOutput, 'received a message:', event.data);
		/***james disable for testing**/
		var obj = JSON.parse(event.data);
		
		switch (obj.type)
		{
			case 'fileinfo':
				end[channelid] = obj.end;
				chunkarray = new Uint8Array(obj.end);
				console.log(channelNameForConsoleOutput + ' set end to ' + end[channelid]);
			break;
			case 'chunk':
				var name = obj.id;
				/*var bin = Base64Binary.decodeArrayBuffer(obj.data);
				var trimmed = bin.slice(0,obj.size);
				
				
				chunkarray.set( new Uint8Array( trimmed ), obj.start);
				total += obj.size;
				*/
				console.log (channelNameForConsoleOutput + ' At:' + total[channelid] + ' End:' + end[channelid]);
				
				
				if (total[channelid]+obj.size==end[channelid])
				{
					recv[channelid] += obj.data;
					total[channelid] += obj.size;
					console.log('finished, writing file');
					chunkarray = Base64Binary.decodeArrayBuffer(recv[channelid]);
					window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
					  // Capture current iteration's file in local scope for the getFile() callback.
						console.log('got file system');
						fs.root.getFile(name + ' save', {create: true, exclusive: true}, function(fileEntry) {
							console.log('created entry');
							fileEntry.createWriter(function(fileWriter) {
								//var dataView = new DataView(chunkarray);
								var blob = new Blob([chunkarray]);
								fileWriter.write(blob); // Note: write() can take a File or Blob object.
								onInitFs(fs);
								console.log('new file ' + fileEntry.name);
							}, errorHandler);
						  
						}, errorHandler);
							
					}, errorHandler);
				}
				else if (obj.start> total[channelid] )
				{
					console.log (channelNameForConsoleOutput + ' missing packet at ' + total[channelid] + ' recieved ' + obj.start);
				
					var payload = {
						type:'reset',
						start:total[channelid]
					};
					
					var json = JSON.stringify(payload);
					
					channel.send(json);
					//Request missing chunk again
					
				}
				else if (total[channelid]+obj.size>end[channelid])
				{
					console.log ('total exceeded');
				}
				else
				{
					recv[channelid] += obj.data;
					total[channelid] += obj.size;
				}
			
			break;
				
		}
    };

    channel.onopen = function () {
		
	
		var payload = {
			type:'getchunk',
			start:start[channelid],
			end: filesize,//end[channelid],
			id:id
		};
		
        channel.send(JSON.stringify(payload));
    };
}



function createAnswer(offerSDP,id,channelid) {
    answerer = new webkitRTCPeerConnection(iceServers, optionalRtpDataChannels);
    answererDataChannel = answerer.createDataChannel('RTCDataChannel', {
        reliable: true
    });

    setChannelEvents(answererDataChannel, 'answerer');

    answerer.onicecandidate = function (event) {
        if (!event || !event.candidate) return;
		socket.emit('answericecandidate', {id:id, candidate:event.candidate, channelid:channelid});
        //offerer && offerer.addIceCandidate(event.candidate);
    };

    answerer.setRemoteDescription(new RTCSessionDescription(offerSDP));
	
	console.log('recieved SDP sending reply');
	
    answerer.createAnswer(function (sessionDescription) {
        answerer.setLocalDescription(sessionDescription);
		socket.emit('connect', {id:id, sdp:sessionDescription, channelid:channelid});
    }, null, mediaConstraints);
}

var socket = io.connect('http://localhost:3000/');

function getFile(id)
{
/*New Offerer DataChannel to recieve file down*/
	var channelid = connections.length;
	
	var offerer = new webkitRTCPeerConnection(iceServers, optionalRtpDataChannels);
	
	var offererDataChannel = offerer.createDataChannel('RTCDataChannel', {
		reliable: true
	});

	offerer.onicecandidate = function (event) {
		if (!event || !event.candidate) return;
			socket.emit('offericecandidate', {channelid:channelid, candidate:event.candidate});
	};
	
	connections[channelid] = {offerer:offerer, offererDataChannel:offererDataChannel};
/*New Offerer DataChannel to recieve file down*/


	setChannelEvents(offererDataChannel, 'offerer');
	
	offerer.createOffer(
		function (sessionDescription) {
			sessionDescription.sdp = transformOutgoingSdp(sessionDescription.sdp);
			offerer.setLocalDescription(sessionDescription);
			socket.emit('getchunk', {id:id, sdp:sessionDescription, channelid:channelid});
		}, 
		null, mediaConstraints);
}
socket.on('get', function (data) {
	console.log(data);	
	var sdp = data.sdp;
	createAnswer(sdp,data.id,data.channelid);
/*TODO: Serve the section of the file to another user
Recieve an SDP*/
});


socket.on('offericecandidate', function (data) {
	console.log(data);	
    answerer.addIceCandidate(new RTCIceCandidate(data.candidate));
});


socket.on('reply', function (data) {
	console.log(data);	
	var sdp = data.sdp;
	var channelid = data.channelid;
	
	console.log('running events under channel ' + channelid);
	setDownloaderChannelEvents(connections[channelid].offererDataChannel, 'download' + channelid, data.id,data.filesize, channelid);
	
    connections[channelid].offerer.setRemoteDescription(new RTCSessionDescription(sdp));
/*TODO: Serve the section of the file to another user
Recieve an SDP*/
});

socket.on('answericecandidate', function (data) {
	console.log(data);	
	var channelid = data.channelid;
	
    connections[channelid].offerer.addIceCandidate(new RTCIceCandidate(data.candidate));
});
	
	
	
socket.on('joinedstream', function (data) {
	console.log(data);	
});

socket.on('streamfileregistered', function(data){
	console.log('recieved new file on stream ' + data.streamid);
	getFile(data.fileid);
});

	
if (streamid!='undefined')	
{
socket.emit('registerstream',{streamid:streamid});
}



</script>

<input type="file" id="myfile" multiple /><br>

<ul id="filelist"></ul>
<script>

window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;


function errorHandler(e) {
	var msg = '';

	switch (e.code) {
		case FileError.QUOTA_EXCEEDED_ERR:
		msg = 'QUOTA_EXCEEDED_ERR';
		break;
		case FileError.NOT_FOUND_ERR:
		msg = 'NOT_FOUND_ERR';
		break;
		case FileError.SECURITY_ERR:
		msg = 'SECURITY_ERR';
		break;
		case FileError.INVALID_MODIFICATION_ERR:
		msg = 'INVALID_MODIFICATION_ERR';
		break;
		case FileError.INVALID_STATE_ERR:
		msg = 'INVALID_STATE_ERR';
		break;
		default:
		msg = 'Unknown Error';
		break;
	};

  console.log('Error: ' + msg);
}
	
function toArray(list) {
	return Array.prototype.slice.call(list || [], 0);
}

/*Begin dir listing*/
function listResults(entries) {
  // Document fragments can improve performance since they're only appended
  // to the DOM once. Only one browser reflow occurs.
  var fragment = document.createDocumentFragment();

  entries.forEach(function(entry, i) {
    var img = entry.isDirectory ? '<img src="folder-icon.gif">' :
                                  '<img src="file-icon.gif">';
    var li = document.createElement('li');
	var startanchor = '<a href="' + entry.toURL() + '">';
	var endanchor = '</a>';
    li.innerHTML = [img, '<span>', startanchor, entry.name, endanchor,'</span>'].join('');
    fragment.appendChild(li);
  });

  document.querySelector('#filelist').innerHTML = "";
  document.querySelector('#filelist').appendChild(fragment);
}

function onInitFs(fs) {

  var dirReader = fs.root.createReader();
  var entries = [];

  // Call the reader.readEntries() until no more results are returned.
  var readEntries = function() {
     dirReader.readEntries (function(results) {
      if (!results.length) {
        listResults(entries.sort());
      } else {
        entries = entries.concat(toArray(results));
        readEntries();
      }
    }, errorHandler);
  };

  readEntries(); // Start reading dirs.

}
/*End dir listing*/


function createFile(file,callback)
{
	socket.emit('newfile', { size:file.size });
	socket.removeAllListeners('filecreated');
	socket.on('filecreated', function (data) {
		console.log(data);	
		callback(file, data.id);
		
	/*TODO: Serve the section of the file to another user
	Recieve an SDP*/
	});
}

	window.requestFileSystem(window.TEMPORARY, 1024*1024, onInitFs, errorHandler);
	
	document.querySelector('#myfile').onchange = function(e) {
		  var files = this.files;
			
		  window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
			// Duplicate each file the user selected to the app's fs.
			for (var i = 0, file; file = files[i]; ++i) {

			  // Capture current iteration's file in local scope for the getFile() callback.
			  createFile(file,function(f,name) {
				fs.root.getFile(name, {create: true, exclusive: true}, function(fileEntry) {
				
				  fileEntry.createWriter(function(fileWriter) {
					fileWriter.write(f); // Note: write() can take a File or Blob object.
					onInitFs(fs);
				  }, errorHandler);
				  
				}, errorHandler);
			  });

			}
  }, errorHandler);

};

/**Base64 code**/
	
function _arrayBufferToBase64( buffer ) {
    var binary = ''
    var bytes = new Uint8Array( buffer )
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode( bytes[ i ] )
    }
    return window.btoa( binary );
}

Base64Binary = {
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	/* will return a  Uint8Array type */
	decodeArrayBuffer: function(input) {
		var bytes = (input.length/4) * 3;
		var ab = new ArrayBuffer(bytes);
		this.decode(input, ab);

		return ab;
	},

	decode: function(input, arrayBuffer) {
		//get last chars to see if are valid
		var lkey1 = this._keyStr.indexOf(input.charAt(input.length-1));		 
		var lkey2 = this._keyStr.indexOf(input.charAt(input.length-2));		 

		var bytes = (input.length/4) * 3;
		if (lkey1 == 64) bytes--; //padding chars, so skip
		if (lkey2 == 64) bytes--; //padding chars, so skip

		var uarray;
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
		var j = 0;

		if (arrayBuffer)
			uarray = new Uint8Array(arrayBuffer);
		else
			uarray = new Uint8Array(bytes);

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		for (i=0; i<bytes; i+=3) {	
			//get the 3 octects in 4 ascii chars
			enc1 = this._keyStr.indexOf(input.charAt(j++));
			enc2 = this._keyStr.indexOf(input.charAt(j++));
			enc3 = this._keyStr.indexOf(input.charAt(j++));
			enc4 = this._keyStr.indexOf(input.charAt(j++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			uarray[i] = chr1;			
			if (enc3 != 64) uarray[i+1] = chr2;
			if (enc4 != 64) uarray[i+2] = chr3;
		}

		return uarray;	
	}
}
/***/

/*** Quota measure code 
window.webkitStorageInfo.queryUsageAndQuota(webkitStorageInfo.TEMPORARY, //the type can be either TEMPORARY or PERSISTENT
function(used, remaining) {
  console.log("Used quota: " + used + ", remaining quota: " + remaining);
}, function(e) {
  console.log('Error', e); 
} );
/***/
</script>
</body>
</html>